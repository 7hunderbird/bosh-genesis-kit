#!/usr/bin/perl
use warnings;
use strict;
use YAML qw(Load LoadFile);
use JSON::PP qw(decode_json);
use File::Find;
use FindBin;

if (!$ENV{GITHUB_ACCESS_TOKEN}) {
	print STDERR "Please set \$GITHUB_ACCESS_TOKEN in your environment...\n";
	exit 1;
}

my @months = qw(ignored January February March April May June July August September October November December);
sub github {
	my ($org, $repo, $tag, $type) = @_;
	my ($url, $day, $mon, $year);
	if ($type eq 'release') {
		printf STDERR "  - $org/$repo release $tag\n";
		my $lookup_url="https://api.github.com/repos/$org/$repo/releases";
		my $out = qx(curl -Ls -u "$ENV{GITHUB_ACCESS_TOKEN}:" "$lookup_url" | jq -r --arg t "$tag" '.[] | select(.tag_name == \$t)');
		return ("Tag $tag not found",'') unless $out;
		my $data = decode_json($out);
		$url = $data->{html_url} || '';
		return ('-', $url) unless $data->{published_at};
		($year, $mon, $day) = ($data->{published_at} =~ m/^(\d{4})-(\d{2})-(\d{2})/);
	} elsif ($type eq 'commit') {
		printf STDERR "  - $org/$repo tag $tag\n";
		my $lookup_url="https://api.github.com/repos/$org/$repo/tags";
		my $out = qx(curl -Ls -u "$ENV{GITHUB_ACCESS_TOKEN}:" "$lookup_url");
		my $tags = decode_json($out);
		my $target_tag = (grep {$_->{name} eq $tag} @$tags)[0];
		return ("Tag $tag not found",'');
		my $commit_url = $target_tag->{commit}{url};
		$out = qx(curl -Ls -u "$ENV{GITHUB_ACCESS_TOKEN}:" "$commit_url");
		my $data = decude_json($out);
		(my $url = $data->{html_url}) =~ s#/commit/#/tree/#;
		($year, $mon, $day) = ($data->{commit}{author}{date} =~ m/^(\d{4})-(\d{2})-(\d{2})/);
	}
	return ("$day $months[$mon] $year", $url);
}

my %versions;
printf STDERR "Retrieving releases found by spec tests...\n";
my $filter = $FindBin::Bin . '/../../spec/results/*.yml';
my $data = qx(for x in $filter ; do spruce json \$x | jq -r '.releases[] | "\\(.name) \\(.version) \\(.url)"' 2>/dev/null ; done | sort | uniq);

printf STDERR "checking ci/upstream.yml for more details...\n";
my $upstream = LoadFile($FindBin::Bin."/../upstream.yml");
my $sections = $upstream->{sections} || {};
delete $upstream->{sections};
my %found;
for (split('\n',$data)) {
	my ($name, $version, $url) = split(' ',$_,3);
	my $section = (grep {defined($upstream->{$_}{$name})} keys(%$upstream))[0] || '-';
	my ($type,$target);
	if ($url =~ /$name-$version-([^-]*(?:-[^0-9][^-]*)*)-(\d*(?:\.\d*)*)-/) {
		$type = 'compiled';
		$target = "$1\@$2";
	} else {
		$type = 'source';
	}
	my $tag = (defined($upstream->{$section}{$name}{tag_prefix}) ? $upstream->{$section}{$name}{tag_prefix} : 'v').$version;

	$found{$section} ||= {};
	unless (defined($found{$section}{"$name/$version"})) {
		my ($date,$release_url) = github(
			$upstream->{$section}{$name}{org},
			$upstream->{$section}{$name}{repo},
			$tag,
			$upstream->{$section}{$name}{type},
			$upstream->{$section}{$name}{url}
		);
		$found{$section}{"$name/$version"} = {
			name => $name,
			version => $version,
			url => $release_url,
			date => $date,
			form => []
		};
	}
	push(@{$found{$section}{"$name/$version"}{form}}, "compiled: $target") if $type eq 'compiled';
	push(@{$found{$section}{"$name/$version"}{form}}, "source") if $type eq 'source';
}
for (@$sections) {
	my $s = $_->{name};
	my $l = $_->{label} || uc($s)." Components";

	print "\n\n";
	print "# $l\n\n";
	print "| Release | Version | Release Date | Type |\n";
	print "| ------- | ------- | ------------ | ---- |\n";
	for my $r (sort keys %{$found{$s}}) {
		my $c = $found{$s}{$r};
		$c->{label} ||= $c->{name};
		printf "| %s | %s | %s | %s |\n",
			$c->{label},
			$c->{url} ? sprintf("[%s](%s)", $c->{version}, $c->{url}) : $c->{version},
			$c->{date},
			join("<br>", sort @{$c->{form}});
	}
}

exit 0;
__DATA__
for my $k (keys %$upstream) {
	die "$k component set not listed in labels._ list...\n"
		unless $labels->{$k};
	for my $c (@{$upstream->{$k}}) {
		delete $found{$c->{name}};
		die "$k component '$c->{name}' not found in manifest 'releases:' stanza...\n"
			unless $versions{$c->{name}};
	}
}

if (%found) {
	for (sort keys %found) {
		printf STDERR "no ci/upstream.yml entry found for '$_'\n";
	}
	die "update ci/upstream.yml before continuing...\n";
}

for my $k (@{$labels->{_}}) {
	my $l = $labels->{$k} || uc($k)." Components";

	print "\n\n";
	print "# $l\n\n";
	print "| Release | Version | Release Date |\n";
	print "| ------- | ------- | ------------ |\n";
	for my $c (@{$upstream->{$k}}) {
		$c->{label} ||= $c->{name};
		if ($c->{notes}) {
			(my $url = $c->{notes}) =~ s/\$\{version}/$versions{$c->{name}}/g;
			my $dated = ($url =~ m/github.com/) ? github($url) : '-';
			print "| $c->{label} | [$versions{$c->{name}}]($url) | $dated |\n";
		} else {
			print "| $c->{label} | $versions{$c->{name}} | - |\n";
		}
	}
}
